{
  "version": 3,
  "sources": ["../../three-rounded-box/index.js"],
  "sourcesContent": ["/**\r\n * @author pailhead / http://dusanbosnjak.com\r\n */\r\nmodule.exports = function( THREE ){\r\n\r\nRoundedBoxGeometry = function ( \r\n\twidth , \r\n\theight , \r\n\tdepth , \r\n\tradius, \r\n\tradiusSegments\r\n) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthis.type = 'RoundedBoxGeometry';\r\n\r\n\r\n\t//validate params ===================================\r\n\r\n\tradiusSegments = !isNaN( radiusSegments ) ? Math.max( 1, Math.floor( radiusSegments ) ) : 1 ;\r\n\r\n\twidth =  !isNaN(width)  ? width  : 1;\r\n\theight = !isNaN(height) ? height : 1;\r\n\tdepth =  !isNaN(depth)  ? depth  : 1;\r\n\r\n\tradius = !isNaN(radius) ? radius : .15;\r\n\r\n\tradius = Math.min( radius , Math.min( width , Math.min( height , Math.min( depth ) ) ) / 2 );\r\n\r\n\tvar edgeHalfWidth =  width / 2 - radius;\r\n\tvar edgeHalfHeight = height / 2 - radius;\r\n\tvar edgeHalfDepth =  depth / 2 - radius;\r\n\r\n\r\n\t//not sure why this is needed, for querying? ========\r\n\r\n\tthis.parameters = {\r\n\t\twidth: width , \r\n\t\theight: height , \r\n\t\tdepth: depth , \r\n\t\tradius: radius, \r\n\t\tradiusSegments: radiusSegments\r\n\t};\r\n\r\n\r\n\t//calculate vertices count ==========================\r\n\r\n\tvar rs1 =  radiusSegments + 1; //radius segments + 1 \r\n\r\n\tvar totalVertexCount = ( rs1 * radiusSegments + 1 ) << 3; \r\n\r\n\r\n\t//make buffers ======================================\r\n\r\n\tvar positions = \tnew THREE.BufferAttribute( new Float32Array( totalVertexCount * 3 ), 3 );\r\n\t\r\n\tvar normals = \t\tnew THREE.BufferAttribute( new Float32Array( totalVertexCount * 3 ), 3 );\r\n\t\r\n\r\n\t//some vars =========================================\r\n\r\n\tvar \r\n\t\tcornerVerts = [], \r\n\t\tcornerNormals = [],\r\n\t\tnormal = new THREE.Vector3(),\r\n\t\tvertex = new THREE.Vector3(),\r\n\t\tvertexPool = [],\r\n\t\tnormalPool = [],\r\n\t\tindices = []\r\n\t;\r\n\r\n\tvar\r\n\t\tlastVertex = rs1 * radiusSegments,\r\n\t\tcornerVertNumber = rs1 * radiusSegments + 1\r\n\t;\r\n\r\n\tdoVertices();\r\n\tdoFaces();\r\n\tdoCorners();\r\n\tdoHeightEdges();\r\n\tdoWidthEdges();\r\n\tdoDepthEdges()\r\n\r\n\t// calculate vert positions =========================\r\n\r\n\tfunction doVertices(){\r\n\r\n\t\t//corner offsets\r\n\t\tvar cornerLayout = [\r\n\t\t\tnew THREE.Vector3(  1 ,  1 ,  1 ),\r\n\t\t\tnew THREE.Vector3(  1 ,  1 , -1 ),\r\n\t\t\tnew THREE.Vector3( -1 ,  1 , -1 ),\r\n\t\t\tnew THREE.Vector3( -1 ,  1 ,  1 ),\r\n\t\t\tnew THREE.Vector3(  1 , -1 ,  1 ),\r\n\t\t\tnew THREE.Vector3(  1 , -1 , -1 ),\r\n\t\t\tnew THREE.Vector3( -1 , -1 , -1 ),\r\n\t\t\tnew THREE.Vector3( -1 , -1 ,  1 )\r\n\t\t];\r\n\r\n\t\t//corner holder \r\n\t\tfor ( var j = 0 ; j < 8 ; j ++ ){\r\n\r\n\t\t\tcornerVerts.push([]); \r\n\t\t\tcornerNormals.push([]); \r\n\r\n\t\t}\r\n\r\n\t\t//construct 1/8 sphere ==============================\r\n\r\n\t\tvar PIhalf = Math.PI / 2;\r\n\r\n\t\tvar cornerOffset = new THREE.Vector3( edgeHalfWidth , edgeHalfHeight , edgeHalfDepth );\r\n\r\n\t\tfor ( var y = 0; y <= radiusSegments; y ++ ) {\r\n\r\n\t\t\tvar v = y / radiusSegments;\r\n\r\n\t\t\tvar va = v * PIhalf; //arrange in 90 deg\r\n\r\n\t\t\tvar cosVa = Math.cos( va ); //scale of vertical angle \r\n\r\n\t\t\tvar sinVa = Math.sin( va );\r\n\r\n\t\t\tif( y == radiusSegments ){\r\n\r\n\t\t\t\tvertex.set( 0 , 1 , 0 );\r\n\r\n\t\t\t\tvar vert = vertex.clone().multiplyScalar( radius ).add( cornerOffset );\r\n\t\t\t\t\r\n\t\t\t\tcornerVerts[0].push( vert );\r\n\r\n\t\t\t\tvertexPool.push( vert );\r\n\t\t\t\t\r\n\t\t\t\tvar norm = vertex.clone();\r\n\r\n\t\t\t\tcornerNormals[0].push( norm );\r\n\r\n\t\t\t\tnormalPool.push( norm );\r\n\r\n\t\t\t\tcontinue; //skip row loop\r\n\t\t\t\r\n\t\t\t} \t\r\n\r\n\t\t\tfor ( var x = 0; x <= radiusSegments; x ++ ) {\r\n\r\n\t\t\t\tvar u = x / radiusSegments;\r\n\r\n\t\t\t\tvar ha = u * PIhalf;\r\n\r\n\t\t\t\t//make 1/8 sphere points\r\n\t\t\t\tvertex.x = cosVa * Math.cos( ha );\r\n\t\t\t\tvertex.y = sinVa;\r\n\t\t\t\tvertex.z = cosVa * Math.sin( ha );\r\n\r\n\t\t\t\t//copy sphere point, scale by radius, offset by half whd\r\n\t\t\t\tvar vert = vertex.clone().multiplyScalar( radius ).add( cornerOffset );\r\n\r\n\t\t\t\tcornerVerts[0].push( vert );\r\n\r\n\t\t\t\tvertexPool.push( vert );\r\n\t\t\t\t\r\n\t\t\t\t//sphere already normalized, just clone\r\n\r\n\t\t\t\tvar norm = vertex.clone().normalize();\r\n\t\t\t\tcornerNormals[0].push( norm );\r\n\t\t\t\tnormalPool.push( norm );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//distribute corner verts ===========================\r\n\r\n\t\tfor ( var i = 1 ; i < 8 ; i ++ ){\r\n\r\n\t\t\tfor( var j = 0 ; j < cornerVerts[0].length ; j ++ ){\r\n\r\n\t\t\t\tvar vert = cornerVerts[0][j].clone().multiply( cornerLayout[i] );\r\n\r\n\t\t\t\tcornerVerts[i].push( vert );\r\n\t\t\t\t\r\n\t\t\t\tvertexPool.push( vert );\r\n\r\n\t\t\t\tvar norm = cornerNormals[0][j].clone().multiply( cornerLayout[i] );\r\n\r\n\t\t\t\tcornerNormals[i].push( norm );\r\n\r\n\t\t\t\tnormalPool.push( norm );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\t\r\n\r\n\t}\r\n\t\r\n\r\n\t// weave corners ====================================\r\n\r\n\tfunction doCorners(){\r\n\r\n\t\tvar indexInd = 0;\r\n\r\n\r\n\t\tvar flips = [\r\n\t\t\ttrue,\r\n\t\t\tfalse,\r\n\t\t\ttrue,\r\n\t\t\tfalse,\r\n\t\t\tfalse,\r\n\t\t\ttrue,\r\n\t\t\tfalse,\r\n\t\t\ttrue\r\n\t\t];\r\n\r\n\t\tvar lastRowOffset = rs1 * ( radiusSegments - 1 );\r\n\r\n\t\tfor ( var i = 0 ; i < 8 ; i ++ ){\r\n\r\n\t\t\tvar cornerOffset = cornerVertNumber * i;\r\n\r\n\t\t\tfor ( var v = 0 ; v < radiusSegments - 1 ; v ++ ){\r\n\r\n\t\t\t\tvar r1 = v * rs1; \t\t//row offset\r\n\t\t\t\tvar r2 = (v + 1) * rs1; //next row\r\n\r\n\t\t\t\tfor ( var u = 0 ; u < radiusSegments ; u ++ ){\r\n\r\n\t\t\t\t\tvar u1 = u + 1;\r\n\t\t\t\t\tvar a = cornerOffset + r1 + u;\r\n\t\t\t\t\tvar b = cornerOffset + r1 + u1;\r\n\t\t\t\t\tvar c = cornerOffset + r2 + u;\r\n\t\t\t\t\tvar d = cornerOffset + r2 + u1;\r\n\r\n\t\t\t\t\tif( !flips[i] ){\r\n\r\n\t\t\t\t\t\tindices.push( a );\r\n\t\t\t\t\t\tindices.push( b );\r\n\t\t\t\t\t\tindices.push( c );\r\n\r\n\t\t\t\t\t\tindices.push( b );\r\n\t\t\t\t\t\tindices.push( d );\r\n\t\t\t\t\t\tindices.push( c );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tindices.push( a );\r\n\t\t\t\t\t\tindices.push( c );\r\n\t\t\t\t\t\tindices.push( b );\r\n\r\n\t\t\t\t\t\tindices.push( b );\r\n\t\t\t\t\t\tindices.push( c );\r\n\t\t\t\t\t\tindices.push( d );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor ( var u = 0 ; u < radiusSegments ; u ++ ){\r\n\r\n\t\t\t\tvar a = cornerOffset + lastRowOffset + u;\r\n\t\t\t\tvar b = cornerOffset + lastRowOffset + u + 1;\r\n\t\t\t\tvar c = cornerOffset + lastVertex;\r\n\r\n\t\t\t\tif( !flips[i] ){\r\n\r\n\t\t\t\t\tindices.push( a );\r\n\t\t\t\t\tindices.push( b );\r\n\t\t\t\t\tindices.push( c );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tindices.push( a );\r\n\t\t\t\t\tindices.push( c );\r\n\t\t\t\t\tindices.push( b );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\t\r\n\r\n\t//plates ============================================\r\n\t//fix this loop matrices find pattern something\r\n\r\n\tfunction doFaces(){\r\n\r\n\t\t//top\r\n\t\tvar a = lastVertex;// + cornerVertNumber * 0;\r\n\t\tvar b = lastVertex + cornerVertNumber;// * 1;\r\n\t\tvar c = lastVertex + cornerVertNumber * 2;\r\n\t\tvar d = lastVertex + cornerVertNumber * 3;\r\n\r\n\t\tindices.push( a );\r\n\t\tindices.push( b );\r\n\t\tindices.push( c );\r\n\t\tindices.push( a );\r\n\t\tindices.push( c );\r\n\t\tindices.push( d );\r\n\r\n\t\t//bottom\r\n\t\ta = lastVertex + cornerVertNumber * 4;// + cornerVertNumber * 0;\r\n\t\tb = lastVertex + cornerVertNumber * 5;// * 1;\r\n\t\tc = lastVertex + cornerVertNumber * 6;\r\n\t\td = lastVertex + cornerVertNumber * 7;\r\n\r\n\t\tindices.push( a );\r\n\t\tindices.push( c );\r\n\t\tindices.push( b );\r\n\t\tindices.push( a );\r\n\t\tindices.push( d );\r\n\t\tindices.push( c );\r\n\r\n\t\t//left \r\n\t\ta = 0;\r\n\t\tb = cornerVertNumber;\r\n\t\tc = cornerVertNumber * 4;\r\n\t\td = cornerVertNumber * 5;\r\n\r\n\t\tindices.push( a );\r\n\t\tindices.push( c );\r\n\t\tindices.push( b );\r\n\t\tindices.push( b );\r\n\t\tindices.push( c );\r\n\t\tindices.push( d );\r\n\r\n\t\t//right \r\n\t\ta = cornerVertNumber * 2;\r\n\t\tb = cornerVertNumber * 3;\r\n\t\tc = cornerVertNumber * 6;\r\n\t\td = cornerVertNumber * 7;\r\n\r\n\t\tindices.push( a );\r\n\t\tindices.push( c );\r\n\t\tindices.push( b );\r\n\t\tindices.push( b );\r\n\t\tindices.push( c );\r\n\t\tindices.push( d );\r\n\r\n\t\t//front \r\n\t\ta = radiusSegments;\r\n\t\tb = radiusSegments + cornerVertNumber * 3;\r\n\t\tc = radiusSegments + cornerVertNumber * 4;\r\n\t\td = radiusSegments + cornerVertNumber * 7;\r\n\r\n\t\tindices.push( a );\r\n\t\tindices.push( b );\r\n\t\tindices.push( c );\r\n\t\tindices.push( b );\r\n\t\tindices.push( d );\r\n\t\tindices.push( c );\r\n\r\n\t\t//back \r\n\t\ta = radiusSegments + cornerVertNumber;\r\n\t\tb = radiusSegments + cornerVertNumber * 2;\r\n\t\tc = radiusSegments + cornerVertNumber * 5;\r\n\t\td = radiusSegments + cornerVertNumber * 6;\r\n\r\n\t\tindices.push( a );\r\n\t\tindices.push( c );\r\n\t\tindices.push( b );\r\n\t\tindices.push( b );\r\n\t\tindices.push( c );\r\n\t\tindices.push( d );\r\n\r\n\t}\r\n\r\n\r\n\t// weave edges ======================================\r\n\r\n\tfunction doHeightEdges(){\r\n\r\n\t\tfor ( var i = 0 ; i < 4 ; i ++ ){\r\n\r\n\t\t\tvar cOffset = i * cornerVertNumber;\r\n\t\t\tvar cRowOffset = 4 * cornerVertNumber + cOffset;\r\n\t\t\tvar needsFlip = i & 1 === 1;\r\n\t\t\tfor ( var u = 0 ; u < radiusSegments ; u ++ ){\r\n\r\n\t\t\t\tvar u1 = u + 1;\r\n\t\t\t\tvar a = cOffset + u;\r\n\t\t\t\tvar b = cOffset + u1;\r\n\t\t\t\tvar c = cRowOffset + u;\r\n\t\t\t\tvar d = cRowOffset + u1;\r\n\r\n\t\t\t\tif( !needsFlip ){\r\n\r\n\t\t\t\t\tindices.push( a );\r\n\t\t\t\t\tindices.push( b );\r\n\t\t\t\t\tindices.push( c );\r\n\t\t\t\t\tindices.push( b );\r\n\t\t\t\t\tindices.push( d );\r\n\t\t\t\t\tindices.push( c );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tindices.push( a );\r\n\t\t\t\t\tindices.push( c );\r\n\t\t\t\t\tindices.push( b );\r\n\t\t\t\t\tindices.push( b );\r\n\t\t\t\t\tindices.push( c );\r\n\t\t\t\t\tindices.push( d );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\t\r\n\tfunction doDepthEdges(){\r\n\r\n\t\tvar cStarts = [ 0 , 2 , 4 , 6 ];\r\n\t\tvar cEnds =   [ 1 , 3 , 5 , 7 ];\r\n\t\t\t\r\n\t\tfor ( var i = 0 ; i < 4 ; i ++ ){\r\n\r\n\t\t\tvar cStart = cornerVertNumber * cStarts[ i ];\r\n\t\t\tvar cEnd =   cornerVertNumber * cEnds[ i ];\r\n\r\n\t\t\tvar needsFlip = 1 >= i;\r\n\r\n\t\t\tfor ( var u = 0 ; u < radiusSegments ; u ++ ){\r\n\r\n\t\t\t\tvar urs1 =  u * rs1;\r\n\t\t\t\tvar u1rs1 = (u+1) * rs1;\r\n\r\n\t\t\t\tvar a = cStart + urs1;\r\n\t\t\t\tvar b = cStart + u1rs1;\r\n\t\t\t\tvar c = cEnd + urs1;\r\n\t\t\t\tvar d = cEnd + u1rs1\r\n\r\n\t\t\t\tif( needsFlip ){\r\n\r\n\t\t\t\t\tindices.push( a );\r\n\t\t\t\t\tindices.push( c );\r\n\t\t\t\t\tindices.push( b );\r\n\t\t\t\t\tindices.push( b );\r\n\t\t\t\t\tindices.push( c );\r\n\t\t\t\t\tindices.push( d );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tindices.push( a );\r\n\t\t\t\t\tindices.push( b );\r\n\t\t\t\t\tindices.push( c );\r\n\t\t\t\t\tindices.push( b );\r\n\t\t\t\t\tindices.push( d );\r\n\t\t\t\t\tindices.push( c );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction doWidthEdges(){\r\n\r\n\t\tvar end = radiusSegments - 1;\r\n\r\n\t\tvar cStarts = [ 0 , 1 , 4 , 5 ];\r\n\t\tvar cEnds =   [ 3 , 2 , 7 , 6 ];\r\n\t\tvar needsFlip = [0,1,1,0];\r\n\r\n\t\tfor ( var i = 0 ; i < 4 ; i ++ ){\r\n\r\n\t\t\tvar cStart = cStarts[i] * cornerVertNumber;\r\n\t\t\tvar cEnd = cEnds[i] * cornerVertNumber;\r\n\t\t\t\r\n\r\n\t\t\tfor ( var u = 0 ; u <= end ; u ++ ){\r\n\r\n\t\t\t\t// var dInd = u != end ? radiusSegments + u * rs1 : cornerVertNumber - 1;\r\n\r\n\t\t\t\tvar a = cStart + radiusSegments + u * rs1;\r\n\t\t\t\tvar b = cStart + (u != end ? radiusSegments + (u + 1) * rs1 : cornerVertNumber - 1);\r\n\r\n\t\t\t\tvar c = cEnd + radiusSegments + u * rs1;\r\n\t\t\t\tvar d = cEnd + (u != end ? radiusSegments + (u + 1) * rs1 : cornerVertNumber - 1);\r\n\r\n\t\t\t\tif( !needsFlip[i] ){\r\n\r\n\t\t\t\t\tindices.push( a );\r\n\t\t\t\t\tindices.push( b );\r\n\t\t\t\t\tindices.push( c );\r\n\t\t\t\t\tindices.push( b );\r\n\t\t\t\t\tindices.push( d );\r\n\t\t\t\t\tindices.push( c );\r\n\r\n\t\t\t\t} \r\n\t\t\t\telse {\r\n\r\n\t\t\t\t\tindices.push( a );\r\n\t\t\t\t\tindices.push( c );\r\n\t\t\t\t\tindices.push( b );\r\n\t\t\t\t\tindices.push( b );\r\n\t\t\t\t\tindices.push( c );\r\n\t\t\t\t\tindices.push( d );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t//fill buffers ======================================\r\n\r\n\tvar index = 0;\r\n\r\n\tfor ( var i = 0 ; i < vertexPool.length ; i ++ ){\r\n\r\n\t\tpositions.setXYZ( \r\n\t\t\tindex , \r\n\t\t\tvertexPool[i].x , \r\n\t\t\tvertexPool[i].y , \r\n\t\t\tvertexPool[i].z \r\n\t\t);\r\n\r\n\t\tnormals.setXYZ( \r\n\t\t\tindex , \r\n\t\t\tnormalPool[i].x , \r\n\t\t\tnormalPool[i].y , \r\n\t\t\tnormalPool[i].z \r\n\t\t);\r\n\r\n\t\tindex++;\r\n\r\n\t}\r\n\r\n\tthis.setIndex( new THREE.BufferAttribute( new Uint16Array( indices ) , 1 ) );\r\n\t\r\n\tthis.addAttribute( 'position', positions );\r\n\t\r\n\tthis.addAttribute( 'normal', normals );\r\n\t\r\n};\r\n\r\nRoundedBoxGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nRoundedBoxGeometry.constructor = RoundedBoxGeometry;\r\n\r\nreturn RoundedBoxGeometry;\r\n\r\n}\r\n"],
  "mappings": "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",
  "names": ["i"]
}
